<?php
/**
 * Gets active pitch sheets
 *
 * @since 1.0.0
 */
function get_active_pitch_sheets() {

	$db = DB::getInstance();
	
	$time = '';
	$current_time = time();

	// If the current time is between 12am-3am, select pitch sheets starting yesterday
	// Otherwise, just get today's
	if ($current_time >= strtotime('today') && $current_time <= strtotime('today 3am')) {
		$time = strtotime('yesterday');
	} else {
		$time = strtotime('today');
	}
	
	$query = $db->dbh->prepare('SELECT * FROM app_pitchtracker_sheets WHERE sheet_timestamp >= '. $time);
	$query->execute();
	
	return $query->fetchAll(PDO::FETCH_CLASS, 'PitchSheet');
	
}

/**
 * Prints defined sheet data
 *
 * @param string Sheet item that should be returned
 * @since 1.0.0
 */
function get_sheets() {

	$db = DB::getInstance();

	$query = $db->dbh->prepare('SELECT * FROM app_pitchtracker_sheets WHERE id = :id');
	$query->bindValue('id', get_var('id'));
	$query->execute();
	$result = $query->fetchAll(PDO::FETCH_CLASS, 'PitchSheet');
	
	return $result;
	
}

/**
 * Gets pitches for defined Sheet ID
 *
 * @since 1.0.0
 */
function get_pitches() {
	
	$db = DB::getInstance();
	
	$query = $db->dbh->prepare('SELECT * FROM app_pitchtracker_pitches WHERE app_pitchtracker_sheets_id = :sheet_id');
	$query->bindValue('sheet_id', get_var('id'));
	$query->execute();
	$result = $query->fetchAll(PDO::FETCH_CLASS, 'Pitch');
	
	return $result;
	
}

/**
 * Returns next pitch number
 *
 * @since 1.0.0
 */
function get_next_pitch_number() {

	$db = DB::getInstance();
	
	$query = $db->dbh->prepare('SELECT MAX(pitch_number) as pitch_number FROM app_pitchtracker_pitches WHERE app_pitchtracker_sheets_id = :sheet_id');
	$query->bindValue('sheet_id', get_var('id'));
	$query->execute();
	$result = $query->fetch();
	
	if ($result) {
		return $result->pitch_number + 1;
	} else {
		return 1;
	}
	
}

/**
 * Returns pitch goal total
 *
 * @since 1.0.0
 */
function get_goal_total() {

	$db = DB::getInstance();
	
	$query = $db->dbh->prepare('SELECT SUM(pitch_goal) as pitch_goal FROM app_pitchtracker_pitches WHERE app_pitchtracker_sheets_id = :sheet_id');
	$query->bindValue('sheet_id', get_var('id'));
	$query->execute();
	$result = $query->fetch();
	
	return $result->pitch_goal;
}

/**
 * Returns pitch actual total
 *
 * @since 1.0.0
 */
function get_actual_total() {

	$db = DB::getInstance();
	
	$query = $db->dbh->prepare('SELECT SUM(pitch_actual) as pitch_actual FROM app_pitchtracker_pitches WHERE app_pitchtracker_sheets_id = :sheet_id');
	$query->bindValue('sheet_id', get_var('id'));
	$query->execute();
	$result = $query->fetch();
	
	return $result->pitch_actual;
}

/**
 * Returns pitch goal percentage
 *
 * @since 1.0.0
 */
function get_pitch_goal_percent() {

	global $db;
	
	$goal_percentage = floor((get_actual_total() / get_goal_total()) * 100);
	
	if ($goal_percentage < 90) {
		return '<span class="label label-danger">'. $goal_percentage .'%</span>';
	} else {
		return '<span class="label label-success">'. $goal_percentage .'%</span>';
	}

}

/**
 * Returns total pitches
 *
 * @since 1.0.0
 */
function get_total_pitches() {

	$db = DB::getInstance();
	
	$query = $db->dbh->prepare('SELECT COUNT(pitch_number) as total_pitches FROM app_pitchtracker_pitches WHERE app_pitchtracker_sheets_id = :sheet_id');
	$query->bindValue('sheet_id', get_var('id'));
	$query->execute();
	$result = $query->fetch();
	
	return $result->total_pitches;
}

/**
 * Returns total pitches hit
 */
function get_total_pitches_hit() {

	$db = DB::getInstance();
	
	$query = $db->dbh->prepare('SELECT COUNT(pitch_result) as total_pitches_hit FROM app_pitchtracker_pitches WHERE app_pitchtracker_sheets_id = :sheet_id AND pitch_result = :result');
	$query->bindValue('sheet_id', get_var('id'));
	$query->bindValue('result', 'hit');
	$query->execute();
	$result = $query->fetch();
	
	return $result->total_pitches_hit;
}

/**
 * Returns total pitches missed
 */
function get_total_pitches_missed() {

	$db = DB::getInstance();
	
	$query = $db->dbh->prepare('SELECT COUNT(pitch_result) as total_pitches_missed FROM app_pitchtracker_pitches WHERE app_pitchtracker_sheets_id = :sheet_id AND pitch_result = :result');
	$query->bindValue('sheet_id', get_var('id'));
	$query->bindValue('result', 'missed');
	$query->execute();
	$result = $query->fetch();
	
	return $result->total_pitches_missed;
}

/**
 * Returns pitch attainment percentage
 */
function get_pitch_attainment_percent() {
	
	$pitch_attainment_percentage = floor((get_total_pitches_hit() / get_total_pitches()) * 100);
	
	if ($pitch_attainment_percentage < 90) {
		return '<span class="label label-danger">'. $pitch_attainment_percentage .'%</span>';
	} else {
		return '<span class="label label-success">'. $pitch_attainment_percentage .'%</span>';
	}

}

/**
 * Returns missed pitch reason(s)
 */
function get_missed_pitch_reasons($pitch_id = '') {
	
	$db = DB::getInstance();
	
	if (!empty($pitch_id)) {
		$sql = 'SELECT missed_description
			FROM app_pitchtracker_missed_reasons
			INNER JOIN app_pitchtracker_pitch_missed_reasons ON app_pitchtracker_pitch_missed_reasons.app_pitchtracker_missed_reasons_id = app_pitchtracker_missed_reasons.id
			WHERE app_pitchtracker_pitches_id = :pitch_id';
		$query = $db->dbh->prepare($sql);
		$query->bindValue('pitch_id', $pitch_id);
		$query->execute();
		$result = $query->fetchAll(PDO::FETCH_COLUMN);
	} else {
		$query = $db->dbh->prepare('SELECT * FROM app_pitchtracker_missed_reasons');
		$query->execute();
		$result = $query->fetchAll();
	}
	
	return $result;
	
}

/**
 * Submits missed pitch reasons to database
 */
function submit_pitch_missed_reasons($pitch_id, $missed_reasons) {
	
	$db = DB::getInstance();
	
	$query = $db->dbh->prepare('INSERT INTO app_pitchtracker_pitch_missed_reasons (app_pitchtracker_pitches_id, app_pitchtracker_missed_reasons_id) VALUES (:pitch_id, :reason_id)');
	
	foreach($missed_reasons as &$reason_id) {
		$query->execute(array('pitch_id' => $pitch_id, 'reason_id' => $reason_id));
	}
	
}

/**
 * Send email upon missed pitch or line down
 */
function send_email($pitch_missed_reasons = '') {

	global $mail;
	
	// Get pitch sheet data
	$sheet = get_sheets();
	
	// Check if line down button was pressed
	// or if a pitch was missed
	if (isset($_POST['line_down'])) {
		
		// Add email address for each user to PHPMailer.
		foreach(User::getUserByCellID($sheet[0]->getCellID()) as $user) {
			$mail->AddAddress($user->getEmailAddress());
		}
		
		// Setup the email itself
		$mail->Subject = Cell::getCell($sheet[0]->getCellID())->getName() .' is down!';
		$mail->Body = Cell::getCell($sheet[0]->getCellID())->getName() .' is down!';
		
		// Send the email
		$mail->Send();
		
	} else {
	
		// Stores IDs of the groups who need to be emailed
		// for each missed pitch reasons selected
		$groups_to_email = array();
		
		// Stores missed pitch reason descriptions
		$missed_reason_descriptions = array();
		
		// Get list of missed pitch reasons
		$missed_pitch_reasons = get_missed_pitch_reasons();
		
		// Add each selected missed pitch reason responsible role ID to $groups_to_email
		foreach($missed_pitch_reasons as $missed_reasons) {
			if (in_array($missed_reasons->id, $pitch_missed_reasons)) {
				$groups_to_email[] = $missed_reasons->app_roles_id;
				$missed_reason_descriptions[] = $missed_reasons->missed_description;
			}
		}
	
		// Add email address for each user to PHPMailer.
		foreach(User::getUserByCellID($sheet[0]->getCellID()) as $user) {
			if (in_array($user->getRoleID(), $groups_to_email) && get_total_pitches_missed() >= $user->getNotificationThreshold() || $user->getIsCellLead() && get_total_pitches_missed() >= $user->getNotificationThreshold()) {
				$mail->AddAddress($user->getEmailAddress());
			}
		}
		
		// Setup the email itself
		$mail->Subject = Cell::getCell($sheet[0]->getCellID())->getName() .' Missed a Pitch';
		$mail->Body = 'Reason(s): '. implode(', ', $missed_reason_descriptions) .'
	
Goal: '. get_goal_total() .'
Actual: '. get_actual_total() .'
	
Total Pitches: '. get_total_pitches() .'
Total Hit: '. get_total_pitches_hit() .'
Total Missed: '. get_total_pitches_missed() .'
	
'. get_page_url();
		
		// Send the email
		$mail->Send();
		
	}
	
}
